{"version":3,"file":"index.es.js","sources":["../src/CommonUtils.ts","../src/IOUtils.ts","../src/URLUtils.ts"],"sourcesContent":["/**\n * Collection of utilities that are commonly used.\n */\nexport class CommonUtils {\n  /**\n   * Checks if a value of type T is null or undefined.\n   * If it is, return true.\n   * If it is not, return false.\n   * \n   * @param {T|null|undefined} obj Value to check.\n   * @returns {boolean} True if the provided object is null or undefined. Otherwise, false.\n   */\n  static isNull<T>(obj: T): boolean {\n    return obj === null || obj === undefined;\n  }\n\n  /**\n   * Removes spaces from a string.\n   * \n   * @param {string} str String to remove spaces from.\n   * @returns {string} String without spaces.\n   */\n  static removeSpaces(str: string): string {\n    return !CommonUtils.isNull(str) ? str.replace(/\\s/g, '') : '';\n  }\n\n  /**\n   * Checks if a string is empty.\n   * \n   * @param {string} str String to check.\n   * @returns {string} True if given string is empty. False otherwise.\n   */\n  static isEmpty(str: string): boolean {\n    return !CommonUtils.isNull(str) ? CommonUtils.removeSpaces(str).length <= 0 : false;\n  }\n\n  /**\n   * Returns the amount of properties a given object has.\n   * \n   * @param {object} obj Object to check.\n   * @returns {number} Number of properties on given object.\n   */\n  static getObjectPropsLength(obj: object): number {\n    return !CommonUtils.isNull(obj) ? Object.keys(obj).length : 0;\n  }\n}\n","import fs from 'fs';\n\nimport { CommonUtils } from './CommonUtils';\n\n/**\n * Collection of utilities that help with reading and writing from and/or to the disk.\n */\nexport class IOUtils {\n  /**\n   * Checks if a given path exists on the file system.\n   * \n   * @param {string} path Path to check.\n   * @returns {boolean} True if given path exists. False otherwise.\n   */\n  static exists(path: string): boolean {\n    return !CommonUtils.isNull(path) ? fs.existsSync(path) : false;\n  }\n\n  /**\n   * Reads a file and returns the contents.\n   * \n   * @param {string} file Path to file.\n   * @returns {string} Contents of file.\n   */\n  static readFile(file: string): string {\n    return !CommonUtils.isNull(file) ? fs.readFileSync(file, 'utf8') : '';\n  }\n\n  /**\n   * Writes an object in JSON form to a file.\n   * \n   * @param {string} file Path to file.\n   * @param {object} data JSON object to write.\n   * @returns {boolean} True if file was successfully written to. Otherwise, false.\n   */\n  static writeJSONFile(file: string, data: object|null|undefined): boolean {\n    // If data is null, return false.\n    if (CommonUtils.isNull(file) || CommonUtils.isNull(data)) {\n      return false;\n    }\n\n    // Convert the object to a JSON string and write the result.\n    fs.writeFileSync(file, JSON.stringify(data));\n\n    return true;\n  }\n}\n","import { CommonUtils } from './CommonUtils';\nimport { IMetadata } from './Interfaces';\n\n/**\n * Collection of utilities that help with interacting with URLs.\n */\nexport class URLUtils {\n  /**\n   * Parse a URL and returns all of the parameters in it.\n   */\n  static getUrlVars(url: string): Array<IMetadata<string>> {\n    if (CommonUtils.isNull(url)) {\n      return [] as Array<IMetadata<string>>;\n    }\n\n    const urlVars: Array<IMetadata<string>> = [] as Array<IMetadata<string>>;\n\n    // Find every URL parameter with REGEX.\n    url.replace(\n      /[?&]+([^=&]+)=([^&]*)/gi,\n      (currentItem: string, key: string, value: string): string => {\n        let urlParam: string;\n\n        // Decode the URI value, remove all special characters, ensure that there is only a maximum of one space between words, and make sure that there are no spaces before or after the string.\n        try {\n          // Get URL parameter.\n          urlParam = decodeURIComponent(value).replace(/[^\\w\\s]/gi, ' ').replace(/\\s\\s+/g, ' ').trim();\n        } catch (e) {\n          // Get URL parameter.\n          urlParam = value.replace(/[^\\w\\s]/gi, ' ').replace(/\\s\\s+/g, ' ').trim();\n        }\n\n        // Push URL parameter to list.\n        urlVars.push({\n          key:   key,\n          value: urlParam\n        });\n\n        return currentItem;\n      }\n    );\n\n    return urlVars;\n  }\n}\n"],"names":[],"mappings":";;AAAA;;;MAGa,WAAW;;;;;;;;;IAStB,OAAO,MAAM,CAAI,GAAM;QACrB,OAAO,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,CAAC;KAC1C;;;;;;;IAQD,OAAO,YAAY,CAAC,GAAW;QAC7B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;KAC/D;;;;;;;IAQD,OAAO,OAAO,CAAC,GAAW;QACxB,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC;KACrF;;;;;;;IAQD,OAAO,oBAAoB,CAAC,GAAW;QACrC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC/D;;;ACxCH;;;AAGA,MAAa,OAAO;;;;;;;IAOlB,OAAO,MAAM,CAAC,IAAY;QACxB,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;KAChE;;;;;;;IAQD,OAAO,QAAQ,CAAC,IAAY;QAC1B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC;KACvE;;;;;;;;IASD,OAAO,aAAa,CAAC,IAAY,EAAE,IAA2B;;QAE5D,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACxD,OAAO,KAAK,CAAC;SACd;;QAGD,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC;KACb;CACF;;AC3CD;;;AAGA,MAAa,QAAQ;;;;IAInB,OAAO,UAAU,CAAC,GAAW;QAC3B,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC3B,OAAO,EAA8B,CAAC;SACvC;QAED,MAAM,OAAO,GAA6B,EAA8B,CAAC;;QAGzE,GAAG,CAAC,OAAO,CACT,yBAAyB,EACzB,CAAC,WAAmB,EAAE,GAAW,EAAE,KAAa;YAC9C,IAAI,QAAgB,CAAC;;YAGrB,IAAI;;gBAEF,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aAC9F;YAAC,OAAO,CAAC,EAAE;;gBAEV,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aAC1E;;YAGD,OAAO,CAAC,IAAI,CAAC;gBACX,GAAG,EAAI,GAAG;gBACV,KAAK,EAAE,QAAQ;aAChB,CAAC,CAAC;YAEH,OAAO,WAAW,CAAC;SACpB,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;KAChB;CACF;;;;"}